{"ast":null,"code":"import React from'react';import{auth,provider}from'./firebase-config';// Ensure this is the correct path\nimport{signInWithPopup}from'firebase/auth';import{jsx as _jsx}from\"react/jsx-runtime\";const GoogleLogin=_ref=>{let{setUserRole}=_ref;const handleGoogleLogin=async()=>{try{// Trigger the Google sign-in popup\nconst result=await signInWithPopup(auth,provider);// The signed-in user info\nconst user=result.user;// Assuming you're storing the user role (e.g., based on the email domain or other logic)\nsetUserRole('client');// You can modify this based on your needs\n// Save the user to local storage (or session, or your state management solution)\nlocalStorage.setItem(\"user\",JSON.stringify(user));// Redirect to the homepage or a dashboard\nwindow.location.href=\"/\";// Or navigate to a specific page\n}catch(error){console.error(\"Error during Google login\",error);alert(\"Login failed, please try again!\");}};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:handleGoogleLogin,className:\"w-full bg-red-600 text-white p-2 rounded\",children:\"Sign in with Google\"})});};export default GoogleLogin;","map":{"version":3,"names":["React","auth","provider","signInWithPopup","jsx","_jsx","GoogleLogin","_ref","setUserRole","handleGoogleLogin","result","user","localStorage","setItem","JSON","stringify","window","location","href","error","console","alert","children","onClick","className"],"sources":["C:/Users/Baraka/Desktop/Phase 4/mnada-auctions/frontend/src/components/GoogleLogin.js"],"sourcesContent":["import React from 'react';\r\nimport { auth, provider } from './firebase-config'; // Ensure this is the correct path\r\nimport { signInWithPopup } from 'firebase/auth';\r\n\r\nconst GoogleLogin = ({ setUserRole }) => {\r\n  const handleGoogleLogin = async () => {\r\n    try {\r\n      // Trigger the Google sign-in popup\r\n      const result = await signInWithPopup(auth, provider);\r\n\r\n      // The signed-in user info\r\n      const user = result.user;\r\n      \r\n      // Assuming you're storing the user role (e.g., based on the email domain or other logic)\r\n      setUserRole('client'); // You can modify this based on your needs\r\n\r\n      // Save the user to local storage (or session, or your state management solution)\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n\r\n      // Redirect to the homepage or a dashboard\r\n      window.location.href = \"/\"; // Or navigate to a specific page\r\n    } catch (error) {\r\n      console.error(\"Error during Google login\", error);\r\n      alert(\"Login failed, please try again!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={handleGoogleLogin}\r\n        className=\"w-full bg-red-600 text-white p-2 rounded\"\r\n      >\r\n        Sign in with Google\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleLogin;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,IAAI,CAAEC,QAAQ,KAAQ,mBAAmB,CAAE;AACpD,OAASC,eAAe,KAAQ,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEhD,KAAM,CAAAC,WAAW,CAAGC,IAAA,EAAqB,IAApB,CAAEC,WAAY,CAAC,CAAAD,IAAA,CAClC,KAAM,CAAAE,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACF;AACA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAP,eAAe,CAACF,IAAI,CAAEC,QAAQ,CAAC,CAEpD;AACA,KAAM,CAAAS,IAAI,CAAGD,MAAM,CAACC,IAAI,CAExB;AACAH,WAAW,CAAC,QAAQ,CAAC,CAAE;AAEvB;AACAI,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAElD;AACAK,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,GAAG,CAAE;AAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjDE,KAAK,CAAC,iCAAiC,CAAC,CAC1C,CACF,CAAC,CAED,mBACEhB,IAAA,QAAAiB,QAAA,cACEjB,IAAA,WACEkB,OAAO,CAAEd,iBAAkB,CAC3Be,SAAS,CAAC,0CAA0C,CAAAF,QAAA,CACrD,qBAED,CAAQ,CAAC,CACN,CAAC,CAEV,CAAC,CAED,cAAe,CAAAhB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}